syntax = "proto3";

package user;

message User {
  int32 id = 1;
  string name = 2;
  string email = 3;
  string password = 4;
  int32 age = 5;
}

message UserId {
  int32 id = 1;
}

message CreateUserInput {
  string name = 1;
  string email = 2;
  string password = 3;
  int32 age = 4;
}

message UpdateUserInput {
  string id = 1;
}

message Pagination {
  int32 page = 1;
  int32 offset = 2;
  int32 totalCount = 3;
}

message FindUsersPayload {
  repeated User data = 1;
  Pagination pagination = 2;
}

message Empty {}

message WhereParams {
  int32 id = 1;
  string email = 2;
  string name = 3;
  int32 age = 4;
}

message RequestParams {
  WhereParams where = 1;
}

message CountResponse {
  int32 count = 1;
}

message UserComment {
  int32 id = 1;
  string comment = 2;
  int32 userId = 3;
  int32 postId = 4;
  string createdAt = 5;
}

message GetUserWithCommentResponse {
  int32 id = 1;
  string name = 2;
  string email = 3;
  repeated UserComment comments = 4;
}

service UsersService {
  rpc getAllUsers (Empty) returns (FindUsersPayload) {}
  rpc findById (UserId) returns (User) {}
  rpc createUser (CreateUserInput) returns (User) {}
  rpc updateUser (UpdateUserInput) returns (User) {}
  rpc countUserGRPC (RequestParams) returns (CountResponse) {}
  rpc getUserWithComment(UserId)  returns (GetUserWithCommentResponse) {}
}

message Comment {
  int32 id = 1;
  string comment = 2;
  int32 userId = 3;
  int32 postId = 4;
  string createdAt = 5;
}

message FindCommentsPayload {
  repeated Comment data = 1;
  Pagination pagination = 2;
}

message WhereCondition {
  int32 userId = 2;
}

message FindCommentByUserRequest {
  WhereCondition where = 1;
  int32 limit = 2;
  int32 offset = 3;
}

service CommentsService {
  rpc findComments (FindCommentByUserRequest) returns (FindCommentsPayload) {}
}
